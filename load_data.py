
import h5py
import numpy as np
import scipy.io

def load_ground_truth_generation_data(path):

    """
    Loads ground truth data generated by MATLAB annotation tool.

    Returns:
        filters_binary
        600 x 500 x 500 bool

        events_in_frames
        11998 x {eventsInThisFrame} int

        events_for_filters
        600 x {eventsForThisFilter} int

        filter_centroids
        600 x 2 int
    """
    ground_truth_generation_data = scipy.io.loadmat(path)

    # 600 x 500 x 500 bool
    filters_binary = ground_truth_generation_data["filtersBinary"]
    filters_binary = np.array(
        [
            np.array(filters_binary[:, :, i]).transpose()
            for i in range(np.shape(filters_binary)[2])
        ],
        dtype=np.bool,
    )

    # 11998 x {eventsInThisFrame} int
    events_in_frames = ground_truth_generation_data["eventsInFrames"]
    events_in_frames = np.array(
        [events_in_frames[0, i][0] - 1 for i in range(np.shape(events_in_frames)[1])], dtype=object
    )

    # 600 x {eventsForThisFilter} int
    events_for_filters = ground_truth_generation_data["eventsForFilters"]
    events_for_filters = np.array(
        [
            events_for_filters[0, i][0] - 1
            for i in range(np.shape(events_for_filters)[1])
        ]
        , dtype=object
    )

    # 600 x 2 int
    filter_centroids = ground_truth_generation_data["filterCentroids"]
    filter_centroids = [[y, x] for [x, y] in filter_centroids]
    return [filters_binary, events_for_filters, filter_centroids, events_in_frames]


def load_cell_map(map_path, annotation_type):
    if annotation_type == "pca_ica":
        cell_map = scipy.io.loadmat(map_path)
        return cell_map["cellMap"]
    if annotation_type == "cnmf-e":
        pass
    if annotation_type == "min1pipe":
        pass


def load_annotation_data(annotation_path, annotation_type):
    if annotation_type == "pca_ica":
        pca_ica = load_ground_truth_generation_data(annotation_path)
        return pca_ica
    if annotation_type == "cnmf-e":
        pass
    if annotation_type == "min1pipe":
        pass


def load_preprocessed_movie(movie_path):
    movie = h5py.File(movie_path, 'r')
    #frames = copy.deepcopy(movie['1'])
    # movie.close()
    return movie['1']


def get_surroundings(annotation_file):
    pass